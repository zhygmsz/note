大思路
UIPanel,UIWidget,UIDrawCall,UIGeometry这四个类之间的关系,UIPanel内的UIWidget排序触发时机,DC构建细节,DC更新细节
UIRect,UIWidget,UIBasicSprite,UISprite,UITexture,UILabel,渲染数据构建细节,和各个UIRect派生类有关,构建时如何复用内存,如何减少GC,如何减少更新次数,和DC关系
锚点和变换矩阵(位置更新),更新时机,
UIPanel的裁剪,UIScrollView的滑动,
UIRoot屏幕适配,
NGUI事件判定流程,UICamera

UIRect ： MonoBehaviour
	介绍：抽象类,继承自MonoBehaviour,是NGUI框架的根基类
	枚举：
		+AnchorUpdate:
			OnEnable,
			OnUpdate,
			OnStart,
	实例字段：
			+leftAnchor:AnchorPoint,
			+rightAnchor:AnchorPoint,
			+bottomAnchor:AnchorPoint,
			+topAnchor:AnchorPoint,
			
			+updateAnchors:AnchorUpdate = AnchorUpdate.OnUpdate,
			
			#mGo:GameObject,
			#mTrans:Transform,
			#mChildren:BetterList<UIRect>,
			#mChanged:bool = true,主要在UIWidget.UpdateGeometry方法里做判定依据,UIRect派生类里触发该字段为true的情况如下,
									有UIBasicSprite(fillDirection,fillAmount,invert),UISprite(spriteName),UILabel(ProcessText),UIWidget(UpdateVisibility),
			#mParentFound:bool = false,
			-mUpdateAnchors:bool = true,
			-mUpdateFrame:int = -1,
			-mAnchorsCached:bool = false,
			-mRoot:UIRoot,
			-mParent:UIRect,
			-mRootSet:bool = false,
			#mCam:Camera
			
			#mStarted:bool = false,
			+finalAlpha:float = 1f,充当渲染数据最终的alpha,由UICamera.Raycast使用,由UIWidget.UpdateFinalAlpha和UIPanel.CalculateFinalAlpha两个方法更新,
			
	实例属性：
			+cachedGameObject:GameObject,get
			+cachedTransform:Transform,get
			+anchorCamera:Camera,get
			+isFullyAnchored:bool,get
			virtual +isAnchoredHorizontally:bool,get
			virtual +isAnchoredVertically:bool,get
			virtual +cabBeAnchored:bool,get
			+parent:UIRect,get
			+root:UIRoot,get
			+isAnchored:bool,get
			abstract +alpha:float,get set,local alpha,UIWidget的派生类对alpha有不同的计算方式以及使用方式
			abstract +Vector3[] localCorners,get
			abstract +Vector3[] worldCorners,get
			#cameraRayDistance:float,
	实例方法：
			abstract +float CalculateFinalAlpha(int frameID),UIWidget和UIPanel两个直接派生类重写了该方法,用于计算UIRect.finalAlpha（递归形式考虑父节点）
			virtual +Invalidate(bool includeChildren),使该UIRect无效,将UIRect.mChanged置为true,并判断是否需要遍历子节点,如alpha改动则includeChildren为true,颜色变化则为false,
													UIRect派生类覆写该方法并添加逻辑
	静态字段：
			#mSides:Vector3[],避免GC的临时变量
	静态方法：
	
	AnchorPoint
		介绍：UIRect类内的public class,
		实例字段：
				+target:Transform,
				+relative:float,
				+absolute:int,
				+rect:UIRect,
				+targetCam:Camera,
		实例方法：
				+AnchorPoint(),
				+AnchorPoint(float relative),
				+Set(float relative, int absolute),
				+Set(Transform target, float relative, int absolute),
				+SetToNearest(float abs0, float abs1, float abs2),
				+SetToNearest(float rel0, float rel1, float rel2, float abs0, float abs1, float abs2),
				+SetHorizontal(Transform target, float localPos),
				+SetVertical(Transform target, float localPos),
				+Vector3[] GetSides(Transform relativeTo),
		静态字段：
		静态方法：

UIWidget : UIRect
	介绍：
	实例字段：
			-mIsVisibleByAlpha:bool = true,按alpha来看该UIWidget是否可见,大于0.001即为可见,UIWidget.UpdateVisibility方法里对该字段更新,在UIWidget.UpdateGeometry方法里使用,
			-mIsVisibleByPanel:bool = true,按UIPanel来看该UIWidget是否可见,被完全裁剪了不可见,由UIWidget.UpdateVisibility方法对该字段更新,和mIsVisibleByAlpha一起贡献isVisible部分因子,
			-mLastAlpha:float = 0f,在UIWidget.UpdateGeometry方法里使用,承接UIWidget.CalculateFinalAlpha(frame)返回值,并用来判断当前frame的finalAlpha和上一次的finalAlpha相比是否有改变
	实例属性：
			+isVisible,get,UIWidget对外的总可见性,由UICamera.Raycast使用,UIPanel的FindDrawCall,FillDrawCall,FillAllDrawCalls三个方法使用,
							由mIsVisibleByAlpha,mIsVisibleByPanel,mIsInFront,UIRect.finalAlpha,NGUITools.GetActive(this)这几部分共同组成,
	实例方法：
			+float CalculateFinalAlpha(int frameID),内部调用了UpdateFinalAlpha(int frameID)方法,计算出UIRect.finalAlpha,并返回
			#UpdateFinalAlpha(int frameID),以递归形式考虑父节点的UIRect.finalAlpha,并乘以UIWidget的UIWidget.mColor.a,相乘结果存到UIWidget的UIRect.finalAlpha里,供后续逻辑使用
			+UpdateVisibility(bool visibleByAlpha, bool visibleByPanel),更新(存在一个不同)UIWidget的mIsVisibleByAlpha和mIsVisibleByPanel,并置UIRect.mChanged为true,
			+UPdateGeometry(int frame),更新UIWidget,选择性填充UIWidget.geometry,并返回是否有更新,UIPanel.UpdateWidgets方法里调用
	静态字段：
	静态方法：
			+int PanelCompareFunc(UIWidget left, UIWidget right),UIPanel内的所有UIWidget排序方法,按照UIWidget.mDepth从小到大的顺序,如果UIWidget.mDepth相同,则有材质的在前,无材质的在后,在UIPanel内使用
			+int FullCompareFunc(UIWidget left, UIWidget right),完全考虑所有排序因素,先是判断两个UIWidget所属的UIPanel的depth,按照从小到大,
																如果处于同一个UIPanel则使用PanelCompareFunc方法,在NGUITools和NGUIEditorTools里各有一处使用
	疑问：
		UIRect.finalAlpha为什么和UIWidget.mIsVisibleByAlpha共存,两者有各自不同的需求么?
UIBasicSprite : UIWidget
	介绍：
	实例字段：
	实例属性：
	实例方法：
	静态字段：
	静态方法：
UISprite : UIBasicSprite
	介绍：
	实例字段：
	实例属性：
	实例方法：
	静态字段：
	静态方法：
	
UITexture : UIBasicSprite
	介绍：
	实例字段：
	实例属性：
	实例方法：
	静态字段：
	静态方法：
	
UILabel : UIWidget
	介绍：
	实例字段：
	实例属性：
	实例方法：
	静态字段：
	静态方法：

UIGeometry
	介绍：网格数据存储类,对于网格数据较多的UILabel,恰巧又只是位置移动,则可以使用该类,网格数据只需要对顶点应用变换矩阵即可。使用后增加部分内存,但性能表现非常好。
	实例字段：
	实例属性：
	实例方法：
	静态字段：
	静态方法：
	
UIDrawCall : MonoBehaviour
	介绍：
	委托：
		+void OnCreateDrawCall(UIDrawCall dc, MeshFilter filter, MeshRenderer ren),
	实例字段：
			+isDirty:bool = false,
			+onCreateDrawCall:OnCreateDrawCall,在一个UIPanel内创建新DC时,该委托被触发,UIPanel.FillAllDrawCalls时把UIPanel.onCreateDrawCall赋值给UIDrawCall.onCreateDrawCall,目前没地方用
	实例属性：
	实例方法：
	静态字段：
	静态方法：
			+Destroy(UIDrawCall dc),如果有onCreateDrawCall则直接UnityEngine.Object.Destroy()并返回,看起来像是dc由外部委托在维护;
									否则如果在运行从mActiveList移除,添加到mInactiveList,隐藏dc.gameObject,并置dc.mIsNew为true;如果是编辑器模式则直接UnityEngine.Object.DestroyImmediate
	
UIPanel : UIRect
	委托：
		+Material OnCreateMaterial(UIWidget widget, Material mat),
		
	介绍：
	实例字段：
			+widgets:List<UIWidget>,该UIPanel所管辖的所有UIWidget,有AddWidget和RemoveWidget两个方法负责更新,外部代码不允许更新,
			+drawCalls:List<UIDrawCall>,由该UIPanel创建的所有UIDrawCall,FillDrawCall和FillAllDrawCalls两个方法构建,SetDirty和alpha遍历isDirty置为true,OnDisable全删除UIDrawCall并清空,
										UpdateSelf里有删除操作,UpdateDrawCalls里做变换,LateUpdate和FindDrawCall里使用,外部代码不允许更新,
			-mRebuild:bool = false,是否重建该UIPanel下的所有DC,除强制性方法Refresh外,仅在AddWidget和RemoveWidget两个方法里可能触发
			-mSortWidgets:bool = false,是否需要对UIPanel所属的UIWidget们重排序,但目前没地方置为true,在公开方法SortWidgets方法里重排了widgets,并置为了false,
			+onCreateMaterial:OnCreateMaterial,为单个widget自定义材质,为了拥有独一的dc,目前没用到,
			+onCreateDrawCall:UIDrawCall.OnCreateDrawCall,对接UIDrawCall.onCreateDrawCall,并对外提供服务,目前没地方用
	实例属性：
			+override alpha,修改后遍历drawCalls并将UIDrawCall.isDirty置为true
	实例方法：
			+float CalculateFinalAlpha(int frameID),以递归形式考虑父节点的UIRect.finalAlpha,并乘以UIPanel.mAlpha,作为UIPanel的UIRect.finalAlpha
			+SetDirty(),遍历drawCalls并将isDirty置为true,调用Invalidate(true)
			#override OnDisable(),遍历drawCalls并删除每个UIDrawCall,清空drawCalls,
			-LateUpdate(),
			-UpdateSelf(),
			+SortWidgets(),对UIPanel内所辖的UIWidget按照UIWidget.PanelCompareFunc比较规则排序,并重置mSortWidgets为false,在编辑器非运行模式下,修改了UIWidget.depth会触发该方法,
			-FillAllDrawCalls(),
			+FillDrawCall(UIDrawCall dc),
			-UpdateDrawCalls(int sortOrder),
			-UpdateWidgets(),
			+UIDrawCall FindDrawCall(UIWidget w),
	静态字段：
	静态方法：
	疑问：
		
			
	
最佳实践：
		尽量不修改UIPanel.alpha

		
总结
mesh数据更新
mesh数据有哪些
	颜色(包括alpha),顶点位置(UIRect的pos和size),顶点数量,uv
上层触发更新的条件？
更新后如何缓存？